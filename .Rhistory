wordcloud::wordcloud(current.work, scale=c(2,0.2), colors = clrs)
#make word clouds
#
wordcloud::wordcloud(current.work, scale=c(2,0.1), colors = clrs)
#make word clouds
#
wc<-wordcloud::wordcloud(current.work, scale=c(2,0.1), colors = clrs)
wc
tm::findFreqTerms(s)
tm::findFreqTerms(DocumentTermMatrix(x))
tm::findFreqTerms(DocumentTermMatrix(s))
res<-rquery-wordcloud(s)
rquery.wordcloud(s)
rquery.wordcloud(s, scale=c(2,.1))
source('~/GitHub/Manne-COVID-19/R/rquery-wordcloud.R', encoding = 'UTF-8', echo=TRUE)
e
e
# x : character string (plain text, web url, txt file path)
# type : specify whether x is a plain text, a web page url or a file path
# lang : the language of the text
# excludeWords : a vector of words to exclude from the text
# textStemming : reduces words to their root form
# colorPalette : the name of color palette taken from RColorBrewer package,
# or a color name, or a color code
# min.freq : words with frequency below min.freq will not be plotted
# max.words : Maximum number of words to be plotted. least frequent terms dropped
# value returned by the function : a list(tdm, freqTable)
rquery.wordcloud <- function(x, type=c("text", "url", "file"),
lang="english", excludeWords=NULL,
textStemming=FALSE,  colorPalette="Dark2",
min.freq=3, max.words=200, scale=c(2,0.1))
{
library("tm")
library("SnowballC")
library("wordcloud")
library("RColorBrewer")
if(type[1]=="file") text <- readLines(x)
else if(type[1]=="url") text <- html_to_text(x)
else if(type[1]=="text") text <- x
# Load the text as a corpus
docs <- Corpus(VectorSource(text))
# Convert the text to lower case
docs <- tm_map(docs, content_transformer(tolower))
# Remove numbers
docs <- tm_map(docs, removeNumbers)
# Remove stopwords for the language
#docs <- tm_map(docs, removeWords, stopwords(lang))
# Remove punctuations
#docs <- tm_map(docs, removePunctuation)
# Eliminate extra white spaces
docs <- tm_map(docs, stripWhitespace)
# Remove your own stopwords
if(!is.null(excludeWords))
docs <- tm_map(docs, removeWords, excludeWords)
# Text stemming
if(textStemming) docs <- tm_map(docs, stemDocument)
# Create term-document matrix
tdm <- TermDocumentMatrix(docs)
m <- as.matrix(tdm)
v <- sort(rowSums(m),decreasing=TRUE)
d <- data.frame(word = names(v),freq=v)
# check the color palette name
if(!colorPalette %in% rownames(brewer.pal.info)) colors = colorPalette
else colors = brewer.pal(8, colorPalette)
# Plot the word cloud
set.seed(1234)
wordcloud(d$word,d$freq, min.freq=min.freq, max.words=max.words,
random.order=FALSE, rot.per=0.35,
use.r.layout=FALSE, colors=colors)
invisible(list(tdm=tdm, freqTable = d))
}
rquery.wordcloud(s, scale=c(2,.1))
wordcloud(d$word,d$freq, min.freq=min.freq, max.words=max.words,
random.order=FALSE, rot.per=0.35,
use.r.layout=FALSE, colors=colors, scale=scale)
# check the color palette name
if(!colorPalette %in% rownames(brewer.pal.info)) colors = colorPalette
#++++++++++++++++++++++++++++++++++
# rquery.wordcloud() : Word cloud generator
# - http://www.sthda.com
#+++++++++++++++++++++++++++++++++++
# x : character string (plain text, web url, txt file path)
# type : specify whether x is a plain text, a web page url or a file path
# lang : the language of the text
# excludeWords : a vector of words to exclude from the text
# textStemming : reduces words to their root form
# colorPalette : the name of color palette taken from RColorBrewer package,
# or a color name, or a color code
# min.freq : words with frequency below min.freq will not be plotted
# max.words : Maximum number of words to be plotted. least frequent terms dropped
# value returned by the function : a list(tdm, freqTable)
rquery.wordcloud <- function(x, type=c("text", "url", "file"),
lang="english", excludeWords=NULL,
textStemming=FALSE,  colorPalette="Dark2",
min.freq=3, max.words=200, scale=c(2,0.1))
{
library("tm")
library("SnowballC")
library("wordcloud")
library("RColorBrewer")
if(type[1]=="file") text <- readLines(x)
else if(type[1]=="url") text <- html_to_text(x)
else if(type[1]=="text") text <- x
# Load the text as a corpus
docs <- Corpus(VectorSource(text))
# Convert the text to lower case
docs <- tm_map(docs, content_transformer(tolower))
# Remove numbers
docs <- tm_map(docs, removeNumbers)
# Remove stopwords for the language
#docs <- tm_map(docs, removeWords, stopwords(lang))
# Remove punctuations
#docs <- tm_map(docs, removePunctuation)
# Eliminate extra white spaces
docs <- tm_map(docs, stripWhitespace)
# Remove your own stopwords
if(!is.null(excludeWords))
docs <- tm_map(docs, removeWords, excludeWords)
# Text stemming
if(textStemming) docs <- tm_map(docs, stemDocument)
# Create term-document matrix
tdm <- TermDocumentMatrix(docs)
m <- as.matrix(tdm)
v <- sort(rowSums(m),decreasing=TRUE)
d <- data.frame(word = names(v),freq=v)
# check the color palette name
if(!colorPalette %in% rownames(brewer.pal.info)) colors = colorPalette
else colors = brewer.pal(8, colorPalette)
# Plot the word cloud
set.seed(1234)
wordcloud(d$word,d$freq, min.freq=min.freq, max.words=max.words,
random.order=FALSE, rot.per=0.35,
use.r.layout=FALSE, colors=colors, scale=scale)
invisible(list(tdm=tdm, freqTable = d))
}
#++++++++++++++++++++++
# Helper function
#++++++++++++++++++++++
# Download and parse webpage
html_to_text<-function(url){
library(RCurl)
library(XML)
# download html
html.doc <- getURL(url)
#convert to plain text
doc = htmlParse(html.doc, asText=TRUE)
# "//text()" returns all text outside of HTML tags.
# We also don’t want text such as style and script codes
text <- xpathSApply(doc, "//text()[not(ancestor::script)][not(ancestor::style)][not(ancestor::noscript)][not(ancestor::form)]", xmlValue)
# Format text vector into one character string
return(paste(text, collapse = " "))
}
rquery.wordcloud(s, scale=c(2,.1))
rquery.wordcloud(s, scale=c(2,.1))
rquery.wordcloud(s, scale=c(2,.1), rot.per=0.1)
#++++++++++++++++++++++++++++++++++
# rquery.wordcloud() : Word cloud generator
# - http://www.sthda.com
#+++++++++++++++++++++++++++++++++++
# x : character string (plain text, web url, txt file path)
# type : specify whether x is a plain text, a web page url or a file path
# lang : the language of the text
# excludeWords : a vector of words to exclude from the text
# textStemming : reduces words to their root form
# colorPalette : the name of color palette taken from RColorBrewer package,
# or a color name, or a color code
# min.freq : words with frequency below min.freq will not be plotted
# max.words : Maximum number of words to be plotted. least frequent terms dropped
# value returned by the function : a list(tdm, freqTable)
rquery.wordcloud <- function(x, type=c("text", "url", "file"),
lang="english", excludeWords=NULL,
textStemming=FALSE,  colorPalette="Dark2",
min.freq=3, max.words=200, scale=c(2,0.1),
rot.per=0.35)
{
library("tm")
library("SnowballC")
library("wordcloud")
library("RColorBrewer")
if(type[1]=="file") text <- readLines(x)
else if(type[1]=="url") text <- html_to_text(x)
else if(type[1]=="text") text <- x
# Load the text as a corpus
docs <- Corpus(VectorSource(text))
# Convert the text to lower case
docs <- tm_map(docs, content_transformer(tolower))
# Remove numbers
docs <- tm_map(docs, removeNumbers)
# Remove stopwords for the language
#docs <- tm_map(docs, removeWords, stopwords(lang))
# Remove punctuations
#docs <- tm_map(docs, removePunctuation)
# Eliminate extra white spaces
docs <- tm_map(docs, stripWhitespace)
# Remove your own stopwords
if(!is.null(excludeWords))
docs <- tm_map(docs, removeWords, excludeWords)
# Text stemming
if(textStemming) docs <- tm_map(docs, stemDocument)
# Create term-document matrix
tdm <- TermDocumentMatrix(docs)
m <- as.matrix(tdm)
v <- sort(rowSums(m),decreasing=TRUE)
d <- data.frame(word = names(v),freq=v)
# check the color palette name
if(!colorPalette %in% rownames(brewer.pal.info)) colors = colorPalette
else colors = brewer.pal(8, colorPalette)
# Plot the word cloud
set.seed(1234)
wordcloud(d$word,d$freq, min.freq=min.freq, max.words=max.words,
random.order=FALSE, rot.per=0.35,
use.r.layout=FALSE, colors=colors, scale=scale)
invisible(list(tdm=tdm, freqTable = d))
}
#++++++++++++++++++++++
# Helper function
#++++++++++++++++++++++
# Download and parse webpage
html_to_text<-function(url){
library(RCurl)
library(XML)
# download html
html.doc <- getURL(url)
#convert to plain text
doc = htmlParse(html.doc, asText=TRUE)
# "//text()" returns all text outside of HTML tags.
# We also don’t want text such as style and script codes
text <- xpathSApply(doc, "//text()[not(ancestor::script)][not(ancestor::style)][not(ancestor::noscript)][not(ancestor::form)]", xmlValue)
# Format text vector into one character string
return(paste(text, collapse = " "))
}
rquery.wordcloud(s, scale=c(2,.1), rot.per=0.1)
rquery.wordcloud(s, scale=c(2,.1), rot.per=0.5)
#++++++++++++++++++++++++++++++++++
# rquery.wordcloud() : Word cloud generator
# - http://www.sthda.com
#+++++++++++++++++++++++++++++++++++
# x : character string (plain text, web url, txt file path)
# type : specify whether x is a plain text, a web page url or a file path
# lang : the language of the text
# excludeWords : a vector of words to exclude from the text
# textStemming : reduces words to their root form
# colorPalette : the name of color palette taken from RColorBrewer package,
# or a color name, or a color code
# min.freq : words with frequency below min.freq will not be plotted
# max.words : Maximum number of words to be plotted. least frequent terms dropped
# value returned by the function : a list(tdm, freqTable)
rquery.wordcloud <- function(x, type=c("text", "url", "file"),
lang="english", excludeWords=NULL,
textStemming=FALSE,  colorPalette="Dark2",
min.freq=3, max.words=200, scale=c(2,0.1),
rot.per=0.35)
{
library("tm")
library("SnowballC")
library("wordcloud")
library("RColorBrewer")
if(type[1]=="file") text <- readLines(x)
else if(type[1]=="url") text <- html_to_text(x)
else if(type[1]=="text") text <- x
# Load the text as a corpus
docs <- Corpus(VectorSource(text))
# Convert the text to lower case
#docs <- tm_map(docs, content_transformer(tolower))
# Remove numbers
#docs <- tm_map(docs, removeNumbers)
# Remove stopwords for the language
#docs <- tm_map(docs, removeWords, stopwords(lang))
# Remove punctuations
#docs <- tm_map(docs, removePunctuation)
# Eliminate extra white spaces
#docs <- tm_map(docs, stripWhitespace)
# Remove your own stopwords
if(!is.null(excludeWords))
docs <- tm_map(docs, removeWords, excludeWords)
# Text stemming
if(textStemming) docs <- tm_map(docs, stemDocument)
# Create term-document matrix
tdm <- TermDocumentMatrix(docs)
m <- as.matrix(tdm)
v <- sort(rowSums(m),decreasing=TRUE)
d <- data.frame(word = names(v),freq=v)
# check the color palette name
if(!colorPalette %in% rownames(brewer.pal.info)) colors = colorPalette
else colors = brewer.pal(8, colorPalette)
# Plot the word cloud
set.seed(1234)
wordcloud(d$word,d$freq, min.freq=min.freq, max.words=max.words,
random.order=FALSE, rot.per=0.35,
use.r.layout=FALSE, colors=colors, scale=scale)
invisible(list(tdm=tdm, freqTable = d))
}
#++++++++++++++++++++++
# Helper function
#++++++++++++++++++++++
# Download and parse webpage
html_to_text<-function(url){
library(RCurl)
library(XML)
# download html
html.doc <- getURL(url)
#convert to plain text
doc = htmlParse(html.doc, asText=TRUE)
# "//text()" returns all text outside of HTML tags.
# We also don’t want text such as style and script codes
text <- xpathSApply(doc, "//text()[not(ancestor::script)][not(ancestor::style)][not(ancestor::noscript)][not(ancestor::form)]", xmlValue)
# Format text vector into one character string
return(paste(text, collapse = " "))
}
#++++++++++++++++++++++++++++++++++
# rquery.wordcloud() : Word cloud generator
# - http://www.sthda.com
#+++++++++++++++++++++++++++++++++++
# x : character string (plain text, web url, txt file path)
# type : specify whether x is a plain text, a web page url or a file path
# lang : the language of the text
# excludeWords : a vector of words to exclude from the text
# textStemming : reduces words to their root form
# colorPalette : the name of color palette taken from RColorBrewer package,
# or a color name, or a color code
# min.freq : words with frequency below min.freq will not be plotted
# max.words : Maximum number of words to be plotted. least frequent terms dropped
# value returned by the function : a list(tdm, freqTable)
rquery.wordcloud <- function(x, type=c("text", "url", "file"),
lang="english", excludeWords=NULL,
textStemming=FALSE,  colorPalette="Dark2",
min.freq=3, max.words=200, scale=c(2,0.1),
rot.per=0.35)
{
library("tm")
library("SnowballC")
library("wordcloud")
library("RColorBrewer")
if(type[1]=="file") text <- readLines(x)
else if(type[1]=="url") text <- html_to_text(x)
else if(type[1]=="text") text <- x
# Load the text as a corpus
docs <- Corpus(VectorSource(text))
# Convert the text to lower case
#docs <- tm_map(docs, content_transformer(tolower))
# Remove numbers
#docs <- tm_map(docs, removeNumbers)
# Remove stopwords for the language
#docs <- tm_map(docs, removeWords, stopwords(lang))
# Remove punctuations
#docs <- tm_map(docs, removePunctuation)
# Eliminate extra white spaces
#docs <- tm_map(docs, stripWhitespace)
# Remove your own stopwords
if(!is.null(excludeWords))
docs <- tm_map(docs, removeWords, excludeWords)
# Text stemming
if(textStemming) docs <- tm_map(docs, stemDocument)
# Create term-document matrix
tdm <- TermDocumentMatrix(docs)
m <- as.matrix(tdm)
v <- sort(rowSums(m),decreasing=TRUE)
d <- data.frame(word = names(v),freq=v)
# check the color palette name
if(!colorPalette %in% rownames(brewer.pal.info)) colors = colorPalette
else colors = brewer.pal(8, colorPalette)
# Plot the word cloud
set.seed(1234)
wordcloud(d$word,d$freq, min.freq=min.freq, max.words=max.words,
random.order=FALSE, rot.per=0.35,
use.r.layout=FALSE, colors=colors, scale=scale)
invisible(list(tdm=tdm, freqTable = d))
}
#++++++++++++++++++++++
# Helper function
#++++++++++++++++++++++
# Download and parse webpage
html_to_text<-function(url){
library(RCurl)
library(XML)
# download html
html.doc <- getURL(url)
#convert to plain text
doc = htmlParse(html.doc, asText=TRUE)
# "//text()" returns all text outside of HTML tags.
# We also don’t want text such as style and script codes
text <- xpathSApply(doc, "//text()[not(ancestor::script)][not(ancestor::style)][not(ancestor::noscript)][not(ancestor::form)]", xmlValue)
# Format text vector into one character string
return(paste(text, collapse = " "))
}
rquery.wordcloud(s, scale=c(2,.1), rot.per=0.1)
rquery.wordcloud(s, scale=c(1,.1), rot.per=0.1)
rquery.wordcloud(s, scale=c(1.5,.1), rot.per=0.1)
rquery.wordcloud(s, scale=c(1.5,.0.5), rot.per=0.1)
rquery.wordcloud(s, scale=c(1.5,.5), rot.per=0.1)
rquery.wordcloud(s, scale=c(1.2,.1), rot.per=0.1)
#make word clouds
#
wc<-wordcloud::wordcloud(current.work, scale=c(2,0.1), colors = clrs)
#make word clouds
#
wordcloud::wordcloud(current.work, scale=c(2,0.1), colors = clrs)
#make word clouds
#
wordcloud::wordcloud(current.work, scale=c(2,0.1), colors = clrs, rot.per = 0.5)
#make word clouds
#
wordcloud::wordcloud(current.work, scale=c(2,0.1), colors = clrs, rot.per = 0.8)
res<-rquery.wordcloud(current.work, scale=2,0.1, colors=clrs, rot.per = 0.8)
res<-rquery.wordcloud(current.work, scale=2,0.1, colorPalette = "Paired", rot.per = 0.8)
wordcloud::wordcloud(current.work, scale=c(2,0.1), colors = clrs, rot.per = 0.8)
wordcloud::wordcloud(current.work, scale=c(2,0.1), colors = clrs, rot.per = 0.8)
#make word clouds
#
wordcloud::wordcloud(current.work, scale=c(2,0.1), colors = clrs, rot.per = 0.7)
#make word clouds
#
wordcloud::wordcloud(current.work, scale=c(2,0.1), colors = clrs, rot.per = 0.1)
#make word clouds
#
wordcloud::wordcloud(current.work, scale=c(2,0.1), colors = clrs, rot.per = 0.2)
#make word clouds
#
wordcloud::wordcloud(current.work, scale=c(2,0.1), colors = clrs, rot.per = 0.3)
#make word clouds
#
wordcloud::wordcloud(interested.work, scale=c(2,0.1), colors = clrs, rot.per = 0.3)
prepare.wordcloud<- function(s){
paste(s %>%
replace_na(" ") %>%
str_replace_all(" ", "_") %>%
str_replace_all(",", "_") %>%
str_replace_all(";", " ") %>%
str_replace_all("/", ""),
sep="", collapse = " ")
}
clrs<- RColorBrewer::brewer.pal(12,"Paired")
wordcloud::wordcloud(investigators$Title, scale=c(2,0.1), rot.per = 0.3, colors = clrs)
investigators<- covid.df %>% dplyr::select(.data$Title, .data$Clinical.expertise.unified)
summary_table(investigators)
prepare.wordcloud<- function(s){
paste(s %>%
replace_na(" ") %>%
str_replace_all(" ", "_") %>%
str_replace_all(",", "_") %>%
str_replace_all(";", " ") %>%
str_replace_all("/", ""),
sep="", collapse = " ")
}
clrs<- RColorBrewer::brewer.pal(12,"Paired")
wordcloud::wordcloud(investigators$Title, scale=c(2,0.1), rot.per = 0.3, colors = clrs)
prepare.wordcloud<- function(s){
paste(s %>%
replace_na(" ") %>%
str_replace_all(" ", "_") %>%
str_replace_all(",", "_") %>%
str_replace_all(";", " ") %>%
str_replace_all("/", ""),
sep="", collapse = " ")
}
clrs<- RColorBrewer::brewer.pal(12,"Paired")
wordcloud::wordcloud(investigators$Clinical.expertise.unified, scale=c(2,0.1), rot.per = 0.3, colors = clrs)
prepare.wordcloud<- function(s){
paste(s %>%
replace_na(" ") %>%
str_replace_all(" ", "_") %>%
str_replace_all(",", "_") %>%
str_replace_all(";", " ") %>%
str_replace_all("/", ""),
sep="", collapse = " ")
}
clrs<- RColorBrewer::brewer.pal(12,"Paired")
wordcloud::wordcloud(prepare.wordcloud(investigators$Clinical.expertise.unified), scale=c(2,0.1), rot.per = 0.3, colors = clrs)
prepare.wordcloud<- function(s){
paste(s %>%
replace_na(" ") %>%
str_replace_all(" ", "_") %>%
str_replace_all(",", "_") %>%
str_replace_all(";", " ") %>%
str_replace_all("/", ""),
sep="", collapse = " ")
}
clrs<- RColorBrewer::brewer.pal(12,"Paired")
wordcloud::wordcloud(prepare.wordcloud(investigators$Clinical.expertise.unified), scale=c(2,0.1), rot.per = 0.3, colors = clrs, min.freq = 2)
prepare.wordcloud<- function(s){
paste(s %>%
replace_na(" ") %>%
str_replace_all(" ", "_") %>%
str_replace_all(",", "_") %>%
str_replace_all(";", " ") %>%
str_replace_all("/", ""),
sep="", collapse = " ")
}
clrs<- RColorBrewer::brewer.pal(12,"Paired")
wordcloud::wordcloud(prepare.wordcloud(investigators$Clinical.expertise.unified), scale=c(3,0.2), rot.per = 0.3, colors = clrs, min.freq = 2)
prepare.wordcloud<- function(s){
paste(s %>%
replace_na(" ") %>%
str_replace_all(" ", "_") %>%
str_replace_all(",", "_") %>%
str_replace_all(";", " ") %>%
str_replace_all("/", ""),
sep="", collapse = " ")
}
clrs<- RColorBrewer::brewer.pal(12,"Paired")
wordcloud::wordcloud(prepare.wordcloud(investigators$Clinical.expertise.unified), scale=c(3,0.5), rot.per = 0.3, colors = clrs, min.freq = 2)
prepare.wordcloud<- function(s){
paste(s %>%
replace_na(" ") %>%
str_replace_all(" ", "_") %>%
str_replace_all(",", "_") %>%
str_replace_all(";", " ") %>%
str_replace_all("/", ""),
sep="", collapse = " ")
}
clrs<- RColorBrewer::brewer.pal(12,"Paired")
wordcloud::wordcloud(prepare.wordcloud(investigators$Clinical.expertise.unified), scale=c(4,0.5), rot.per = 0.3, colors = clrs, min.freq = 2)
